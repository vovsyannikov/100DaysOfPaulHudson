@file:Suppress("KotlinConstantConditions")

/**
 * # День 2: Простые тип данных
 */
fun main() {
    /**
     * ## Как хранить истину c булевыми значениями
     *
     * Булево значение - это самый примитивный тип данных. Оно хранит 1 бит:
     * `0` или `1` на уровне процессора, `false`(ложь) или `true`(истина) в коде
     */

    val goodDogs = true

    /**
     * У логических значений свои операторы:
     *
     * - `!` - инверсия. Возвращает обратное значение переменной
     * - `&&` - логическое И. Возвращает `true` если значения слева и справа равны `true`
     * - `||` - логическое ИЛИ. Возвращает `true`, если ЛИБО значение слева, либо значение справа равно `true`
     * - `==` - сравнение. Возвращает `true` если значения слева и справа равны друг другу
     * - `<` - сравнение меньше. Возвращает `true`, если значение слева меньше значения справа
     * - `>` - сравнение больше. Возвращает `true`, если значение слева больше значения справа
     * - `<=` - сравнение меньше или равно. Возвращает `true`, если значение слева меньше или равно значению справа
     * - `>=` - сравнение больше или равно. Возвращает `true`, если значение слева больше или равно значению справа
     *
     * Чтобы изменить текущее булево значение на противоположное, необходимо присвоить его с инверсией
     */

    var authenticated = false
    authenticated = !authenticated
    println(authenticated)

    /**
     * Помимо задания значения напрямую, мы можем выводить булевы значения на основе выражений, таких как проверка чётности числа
     *
     * Для этой операции используется оператор `%`, который возвращает остаток от деления.
     * Если при делении на 2 остаток равен 0, тогда число делиться без остатка, что и является определением чётного числа
     */
    val isEven = 120 % 2 == 0
    println(isEven)

    /**
     * ## Как объединить строки
     *
     * Очень часто нужно объединить две строки в одну или вставить какое-то значение для пользователя, вроде результата с пояснением
     *
     * Для этого можно использовать два способа: сложением и интерполяцией
     *
     * Первый способ очевиден: мы складываем две строки, будто они числа.
     * Такой способ правильно называется конкатенация
     */
    val hello = "Hello, "
    val world = "World!"
    val helloWorld = hello + world

    /**
     * Интерполяция - это способ, при котором мы вставляем значения в строку по шаблону.
     * Такой шаблон задаётся из обычной строки, а когда мы хотим получить значение переменной, нужно сначала поставить знак `$`.
     *
     * Если нужно произвести какую-то операцию, тогда её необходимо заключить в фигурные скобки `{ }`
     */
    val user = "Пользователь"
    val deadline = 28
    val currentDay = 16
    val userGreeting = "Привет, $user. У вас осталось ${deadline - currentDay} дней пробного периода"
    println(userGreeting) // Привет, Пользователь. У вас осталось 12 дней пробного периода
}