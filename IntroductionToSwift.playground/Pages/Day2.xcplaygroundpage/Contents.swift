import Foundation
//: [День 1](@previous) | [Содержание](Home) | [Контрольная точка 1](@next)
/*:
# 2: Простые типы данных
## Как хранить истину с булевыми переменными
Булевое значение - это самый примитивный тип данных, для которого нужен всего один бит. Этот самый бит в двоичной системе (на которой построены все современные вычислительные машины) может принимать одно из двух значений: 0 или 1. Отсюда Джордж Буль вывел своё значение, для отображения состояний: ложь или истина, 0 или 1, выключен или включен и т.п.

В ходе данного курсе булевые значения уже появлялись, когда мы узнавали, есть ли у строки префикс или суффикс (стр. 119-122) или делится ли число без остатка на второе число (стр. 173-174)

В программировании булевые значения принимают одно из двух состояний: `true` (истина) или `false` (ложь). Присвоение значений очень схоже с тем, что уже было показано на примерах со строками и числами:
*/

let goodDogs = true
let isMultiple = 120.isMultiple(of: 3)

/*: У булевых значений есть свои логические операторы. Самый простой из них: инверсия, обозначающаяся `!` перед переменной. Это операция вернёт противоположное значение: было `true`, станет `false` */

var authenticated = false
authenticated = !authenticated

/*: Для того чтобы изменить значение на противоположное, у булевых переменных есть метод `toggle()` */

authenticated.toggle()

/*: ---
 ## Как объединять строки

 Порой необходимо взять и объединить несколько строк в одну. Для этого в Swift есть несколько способов:
 1. Через `+`
 2. Через интерполяцию строк
 */

let hello = "Hello, "
let world = "World!"
let helloWorld = hello + world

/*:
 В случае с оператором `+` возникает интересная ситуация, при которой один и тот же символ выполняет разные функции в зависимости от контекста. Такое поведение называется перегрузка операторов. Для чисел + означает сложить, а для строк - объединить.

 - Important:
 Такой формат объединения является наименее предпочтительным, так как данное действие не создаст новую строку сразу, а будет обрабатывать по частям для каждого знака `+`, создавая промежуточные строки в течении всего процесса. Потому так лучше делать исключительно для одного объединения, как в примере на стр. 258

 Второй метод на строке 259 является самым используемым для создания новой строки. Так, например, можно провести следующую операцию:
 */

let user = "Пользователь"
let age = 29
let userGreeting = "Привет. Меня зовут \(user) и мне \(age) лет"
print(userGreeting) // Привет. Меня зовут Пользователь и мне 26 лет

/*: Для интерполяции строк не важен тип данных константы или переменной, так как будет использовано его строчное представление. При выполнении строки 273 в переменную `userGreeting` вместо `\(user)` и `\(age)` будут вставлены значения этих констант. Чтобы продемонстрировать силу интерполяции посмотрим следующий пример:  */

let missionNumber = 11
let missionMessage1 = "Отряд Апполон " + String(missionNumber) + " приземлился на Луну"
let missionMessage2 = "Отряд Апполон \(missionNumber) приземлился на Луну"

/*:
 В случае со строкой 279 мы обязаны вручную привести целочисленную константу `missionNumber` к типу `String`, и конечный результат выглядит коряво

 Так же можно выполнять различные действия внутри интерполяции, например арифметические операции или вызовы методов или встроенных переменных и констант:
 */

let fiveSquaredResult = "5 x 5 = \(5 * 5)"
let helloLetterCount = "В слове '\(hello)' \(hello.count) символов"

//: [День 1](@previous) | [Содержание](Home) | [Контрольная точка 1](@next)
