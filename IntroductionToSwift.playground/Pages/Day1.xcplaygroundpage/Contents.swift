import Foundation
//: [Содержание](Home) | [День 2](@next)
/*:
 # День 1: Первые шаги в Swift
 ## Как создавать переменные и константы

 В строчке 15 есть 4 основных момента:
 1. `var` - Ключевое слово, означающее объявление переменной
 2. `greeting` - Название нашей переменной, которое будет использоваться по ходу программы. Оно может быть любым, однако стоит давать чёткие имена, означающие цель переменной
 3. `=` - Присвоение переменной нового значения. Пробелы вокруг не являются обязательными, но с ними код читать приятней
 4. `"Hello, playground"` - Исходное значение переменной строкового типа. Наличие двойных кавычек вокруг строк **строго обязательно**
*/

var greeting = "Hello, playground"

//: В строчках 19-21 мы создаём переменную имени и меняем её дважды:

var имя = "Дядя Фёдор"
имя = "Матроскин"
имя = "Шарик"

/*: 
 - Important:
 Названия переменных также могут быть, например, на русском языке или иметь символы кодировки UTF 16, такие как Эмодзи, но это затрудняет работу с кодом, поскольку придётся всё время менять раскладку клавиатуры и это считается плохим тоном в командной разработке

 Если же мы хотим зафиксировать значение без возможности (например случайной) перезаписи, тогда используется ключевое слово `let` для создания константы:
*/

let character = "почтальон Печкин"

//: Xcode выдаст ошибку если попробовать убрать `//` перед следующими строчками, так как такое действие невозможно:

//character = "Мурка"

//: Команда, которая используется исключительно разработчиком в целях выявления ошибок (debugging), `print` выглядит следующим образом:

var characterName = "Крокодил Гена"
print(characterName)

characterName = "Чебурашка"
print(characterName)

characterName = "Шапокляк"
print(characterName)

/*: 

 - Important:
 Важно заметить название переменной `characterName` ибо это два слова, которые написаны слитно, первое с маленькой буквы, а остальные - с большой. Это конвенция Swift или же набор правил работы с языком, в которой название переменных формируется так называемым верблюжьем стилем (camelCase), где "горб" - это большая буква следующего слова. Никаких пробелов в названиях быть не может, а также первым символом не может быть число (только буква или эмодзи).

	В некоторых других языках принято использовать нижнее подчёркивание для разделения названия переменных и констант на отдельные слова. Так наш `characterName` может быть написан `character_name`, однако такой стиль является отклонением от нормы в разработке на Swift

	Важно отметить и тот факт, что мы везде используем `characterName` для работы с созданной переменной, так как практически все языки чувствительны к регистру в названиях и компилятор не знает такой переменной как `charactername` или `character_name`. Xcode всегда показывает подсказки на уже существующие переменные и константы что упрощает жизнь
 ---
 - Note:
 По возможности стоит использовать константы вместо переменных, так как компилятору проще работать с этим типом данных и код будет защищён от случайных изменений данных, где их не следует делать.

 В полноценных проектах строчка 62 выдаст предупреждение о том, что переменная была создана, но нигде на всём протяжении её жизни не была изменена и Xcode предложит заменить её на константу `let`
*/

var dogBreed = "Самоед"

/*: 
 ---
 ## Как создавать строки
 Когда мы присваиваем какой-либо текст переменной или константе, в программировании мы называем это строкой (String). Такие строки всегда заключаются в двойные кавычки, а содержание может быть любым:
 */

let actor = "Дензел Вашингтон"
let filename = "paris.jpg"
let result = "⭐️ Победа! ⭐️"

/*:
 - Note:
 Если в строке необходимо указать двойные кавычки для цитат, то это можно поставить '\\' перед специальным символом, чтобы тот был строен в строку:
*/

let quote = "Then he tapped a sign saying \"Believe\" and walked away"

/*:
 Если в строке встречаются переносы, есть два способа их задать:
 1. Можно использовать 3 двойные кавычки в начале строки и в конце. Они должны находится на отдельных строках без каких либо других символов, в том числе пробелы. Формат сохранится полностью, в том числе отступы

 - Important:
 Компилятор не даст создать многостроковую переменную с одинарными кавычками
 */

let movie1 = """
Один день из
	жизни
разработчика Apple
"""

//: 2. Чтобы вместить переменную в одну строку, используется спeциальный символ `\n`, а для табулятора (отступа) - `\t`.

let movie2 = "Один день из\n\tжизни\nразработчика Apple"

//: У всех строк существует особый функционал, который помогает получить информацию о переменной или константе. Например, чтобы вывести количество символов, используется специальная константа `count`, которая вызывается через точку, как и все остальные:

actor.count

//: Эта константа может быть присвоена или выведена в консоль через `print`:

let nameLength = actor.count
print(nameLength)

//: Так же всегда можно вывести строку большими буквами (`uppercased()`) или маленькими (`lowercased()`)

result.uppercased()

/*:
 - Note:
 В случае с `uppercased` использование скобок обязательно, так как по сути это функция, которая "работает" со строкой, преобразует её, а в случае с `count` происходит лишь чтение данных. Данное правило применяется не во всех случаях, о которых будет информация в дальнейших днях курса

 Так же полезно будет использовать методы `hasPrefix` и `hasSuffix`, которые вернут значение `true` (истинно) если строка начинается или заканчивается на указанное значение соответственно и `false` если нет
 */

movie1.hasPrefix("Один день")
movie1.hasPrefix("один день")

filename.hasSuffix(".jpg")

/*:
 - Note:
 Функции, схожие с `hasPrefix`/`hasSuffix`, чувствительны к регистру. Именно поэтому строка 119 выдаст `true`, а 120 - `false`, так как *один* и *Один* являются разными строками

 ---

 ## Как хранить целые числа
 В точности как и со строками, мы можем создать константу или переменную целочисленного типа. Они имеют тип `Int` от латинского Integer - целый, невредимый:
 */

let score = 10

let badBig = 100000000
let reallyBig = 100_000_000
let badReallyBig = 10_00__00__00___000

/*:
 - Note:
 Строки 136-138 создают одно и то же число - 100 000 000. Однако, поскольку большинство символов для разделения (пробелы, запятые и т.п.) имеют другое значение для компилятора, можно использовать нижнее подчёркивание в любом количестве

 Для целочисленных переменных и констант доступны обычные арифметические операции сложения, вычитания, умножения и деления:
 */

let higherScore = score + 10
let lowerScore = score - 2
let doubledScore = score * 2
let squaredScore = score * score
let halvedScore = score / 2

//: Порой необходимо модифицировать значение переменной и записывать результаты обратно в переменную. Это можно сделать двумя способами:

var counter = 5
counter = counter + 5
counter += 5

//: Обе операции на строках 156-157 выполняют одну и ту же операцию по сложению и присвоению обратно в переменную. Остальные арифметические операции так же доступны:

counter *= 2
counter -= 10
counter /= 2

/*:
- Note:
 Данный формат операторов называется составной

 Так же у целочисленных констант и переменных существует полезный метод `isMultiple(of:)`, который позволяет узнать, делится ли первое число на второе без остатка
 */

let number = 120
number.isMultiple(of: 3)
120.isMultiple(of: 3)

/*:
 - Note:
 В строке 173 мы использовали метод на константе, но точно так же можно воспользоваться им и многими другими на полноценных числах. Для строк и других типов данных действует схожее правило
 ---
 ## Как хранить дробные числа
 Дробные числа в программировании часто называют числом с плавающей запятой (floating point) из-за особенности работы вычислительных машин. Вместо того, что хранить такие числа напрямую, используются целыочисленные значения со смещением битов, от того и "плавучесть" запятой. Всю сложность можно прочувствовать на следующем примере:
 */

let floatingPointNumber = 0.1 + 0.2
print(floatingPointNumber)

/*: 
 По умолчанию Swift присваивает дробным числам тип данных `Double` что означает число с плавающей запятой двойной точности. Они характеризуются исключительно и только точкой между целым числом и дробной частью.

 На практике это означает, что число может быть огромным по сравнению с устаревшим типом `Float`, который и является прародителем чисел с плавающей точкой. В некоторых местах в разработке для платформ Apple может встречаться тип `CGFloat`, где `CG` означает принадлежность данного типа данных к библиотеке графических элементов `CoreGraphics`. В последнее время нет разницы использовать `Double` или `CGFloat`, так как Xcode считает их взаимозаменяемыми, но в более старых версиях Swift такой трюк может не сработать

 Swift является строго типизированным языком, в котором при создании переменной или константы у неё обязан быть тип, который не может быть изменён и для любых операций с двумя переменными или константами они должны быть одного типа:
 */

let a = 1
let b = 2.0
let c = Double(a) + b

/*:
 - Important:
 Стоит обратить внимание на строку 197, в который мы специально указываем `Double(a)`, что означает "привести число `a` к типу `Double`". Мы не модифицируем число `a` напрямую, а создаём новую константу с новым типом данных
 */

var currentFace = "Николас Кейдж"
currentFace = "Джон Траволта"

/*: Строки 204 нам говорят: создать переменную типа `String`, а затем поменять значение на новую строку. Однако если мы попытаемся сделать так: */

//currentFace = 35

/*: 
 Xcode выдаст ошибку, так как мы пытаемся присвоить значение совершенно другого типа

 Для дробных чисел доступны все те же арифметические операции что и у целочисленных:
 */

var rating = 5.0
rating *= 2

/*:
 - Note:
 В строке 218 мы умножаем на `rating` на 2, что по сути является целым числом, однако компилятор достаточно умный, чтобы привести 2 к 2.0 и провести операцию без ошибок
 */
//: [Содержание](Home) | [День 2](@next)
