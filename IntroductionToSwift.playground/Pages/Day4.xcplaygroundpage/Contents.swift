import Foundation
//: [День 3](@previous) | [Содержание](Home) | [Контрольная точка 2](@next)
/*:
 # День 4: Сложные типы данных (Часть 2)

 ## Как использовать аннотация типов

 За всё время этого курса мы использовали встроенную возможность Swift по автоматическому определению типов.

 Но иногда нам необходимо создать переменную или константу, у которой нет исходного значения на момент создания или же мы хотим указать другой тип вручную. Для этого существует явная аннотация типа:
 */

var score: Double = 0

/*:
 В строке 14 мы создаём переменную и мы вручную указали её тип: `Double` или дробное число. Без явного указания типа, переменная `score` была бы целочисленной

 Разберём основные типы и как задать их тип явно

 - Простые типы:
 */

let playerName: String = "Лев Яшин"	// `String` = текст
let luckyNumber: Int = 13 			// `Int` = целое число
let pi: Double = 3.141				// `Double` = дробное число
let isAuthenticated: Bool = false	// `Bool` = булевое значение

//: - Сложные типы:

var songs: [String] = ["Группа крови", "Звезда по имени солнце"]// `[<тип>]` = массив
var user: [String: String] = ["id": "User", "password": "User"]	// `[тип ключа>: <тип значения>]` = словарь
var books: Set<String> = ["Евгений Онегин", "Война и мир"]		// `Set<тип>` = набор

/*:
 - Note:
 В строке 33 мы задали тип `Set<String>`, а затем присвоили просто массив. Это сокращение дозволенно именно из-за того, что ранее был явно указан тип. Это строка и `var books: Set<String> = Set([…])` идентичны

 В случае, когда нам нужно создать пустой массив, у нас есть несколько вариантов:
 */

var teams: [String] = [String]()
var cities: [String] = []
var clues = [String]()

/*:
 - Note:
 В строке 43 мы в качестве исходного значения `cities` присваиваем `[]`, что означает пустой массив. Таким методом можно также очистить любой массив или набор. Для словарей используется слегка другой формат, который выполняет те же функции: `[:]`. Строковые переменные можно так же инициализировать в пустом виде используя `""`

 Явные типы работают не только со встроенными типами, но и с созданными разработчиком:
 */

enum UIStyle {
	case light, dark, system
}

var style: UIStyle = .light
style = .dark

/*:
 В случае с `style` мы явно указали тип и потому указывать его в дальнейшем нет нужды. Реальная необходимость указать тип вручную появляется только для переменных и констант, у которых нет исходных данных на момент создания. Во всех остальных случаях аннотация типа является визуальным предпочтением разработчика
 */

let userName: String
// Получение данных с сервера или любая другая работа для формирования `userName`
userName = "Admin"
// Ещё код
print(userName)

/*:
 - Note:
 Swift позволяет создать константу без исходного значения, если указан тип, и сделать **одно и исключительно одно** присвоение значения. После этого можно полноценно работать с константой. Однако, если значение ещё не установлено для константы (можно закомментровать строку 66 поставив `//` в начале), Xcode выдаст ошибку о пустом значении константы

 Swift - строготипизированный язык, в котором каждая переменная или константа **ОБЯЗАНА** иметь тип и его нельзя изменить в процессе выполнения кода. Явная аннотация типа позволяет нам указать, что мы хотим хранить в переменной, но значение должно совпадать с этим типом. Следующая строчка выдаст ошибку:
 */

//var temperature: Double = "Zero"

//: [День 3](@previous) | [Содержание](Home) | [Контрольная точка 2](@next)
